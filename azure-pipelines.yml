# Node.js
# Build a general Node.js project with npm.
# Add steps that analyze code, save build artifacts, deploy, and more:
# https://docs.microsoft.com/azure/devops/pipelines/languages/javascript

trigger:
    branches:
        include:
            - main
    tags:
        include:
            - '*'

pool:
    vmImage: ubuntu-latest

stages:
    - stage: Static
      condition: not(contains(variables['build.sourceBranch'], 'refs/tags/'))
      jobs:
          - job: ESLint
            displayName: ESLint
            steps:
                - task: Cache@2
                  inputs:
                      key: '"npmcache" | "$(Agent.OS)" | package-lock.json'
                      restoreKeys: |
                          npmcache | "$(Agent.OS)"
                          npmcache
                      path: $(System.DefaultWorkingDirectory)/.npm
                  displayName: Cache NPM packages
                - script: |
                      npm set cache .npm
                      npm ci
                      npm run lint
    - stage: Build
      dependsOn: Static
      jobs:
          - job: Ubuntu_x64
            displayName: Build Ubuntu X64
            steps:
                - task: NodeTool@0
                  inputs:
                      versionSpec: '18.x'
                  displayName: 'Install Node.js'

                - task: Cache@2
                  inputs:
                      key: '"npmcache" | "$(Agent.OS)" | package-lock.json'
                      restoreKeys: |
                          npmcache | "$(Agent.OS)"
                          npmcache
                      path: $(System.DefaultWorkingDirectory)/.npm
                  displayName: Cache NPM packages

                - script: |
                      npm set cache .npm
                      npm ci
                      npm run build
                  displayName: 'Build'

    - stage: Test
      dependsOn: Build
      jobs:
          - job: Ubuntu_x64
            displayName: Test Ubuntu X64
            steps:
                - task: Cache@2
                  inputs:
                      key: '"npmcache" | "$(Agent.OS)" | package-lock.json'
                      restoreKeys: |
                          npmcache | "$(Agent.OS)"
                          npmcache
                      path: $(System.DefaultWorkingDirectory)/.npm
                  displayName: Cache NPM packages
                - script: |
                      npm set cache .npm
                      npm ci
                      CI=true npm run ci:test
                  displayName: 'Test'
                - task: PublishTestResults@2
                  displayName: Publish Test Results
                  condition: succeededOrFailed()
                  inputs:
                      testRunner: JUnit
                      testResultsFiles: '**/junit.xml'
                - task: PublishCodeCoverageResults@2
                  inputs:
                      summaryFileLocation: 'coverage/cobertura-coverage.xml'
                      pathToSources: 'lib'

    - stage: PublishProduction
      displayName: Publish
      condition: contains(variables['build.sourceBranch'], 'refs/tags/')
      jobs:
          - job: Ubuntu_x64
            displayName: Publish Package Job
            steps:
                - task: Cache@2
                  inputs:
                      key: '"npmcache" | "$(Agent.OS)" | package-lock.json'
                      restoreKeys: |
                          npmcache | "$(Agent.OS)"
                          npmcache
                      path: $(System.DefaultWorkingDirectory)/.npm
                  displayName: Cache NPM packages
                - script: |
                      echo -e "\n//npm.pkg.github.com/:_authToken=$(GITHUB_TOKEN)" >> ./.npmrc
                      npm set cache .npm
                      npm ci
                      npm install
                      npm run build
                      npm version --git-tag-version=false ${BUILD_SOURCEBRANCHNAME}
                      npm publish
          #- job: Github
          #  displayName: Github Mirror
          #  steps:
          #      - script: |
          #            git config user.name "Nicolas Pope"
          #            git config user.email "npope@uef.fi"
          #            git fetch --unshallow origin
          #            git push --prune $(git_token) +refs/remotes/origin/*:refs/heads/* +refs/tags/*:refs/tags/*
